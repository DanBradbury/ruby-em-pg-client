= em-pg-client

Author::    RafaÅ‚ Michalski  (mailto:rafal@yeondir.com)

* http://github.com/royaltm/ruby-em-pg-client

== DESCRIPTION

*em-pg-client* is a PostgreSQL EventMachine client wrapper for Ruby
based on ruby-pg[https://bitbucket.org/ged/ruby-pg]

== FEATURES

* minimal changes to PG::Connection API
* fully async auto reconnects on socket connection loss (like server restarts)
* true non-blocking asynchronous processing
* EM-Synchrony[https://github.com/igrigorik/em-synchrony] support

== BUGS/LIMITATIONS

* actually no ActiveRecord nor Sequel support (you are welcome to contribute).

== API Changes

* +on_reconnect+ renamed to more accurate +on_autoreconnect+
  (well, it's not used by +#reset+ call)

== TODO:

* implement em version of get_copy_data and put_copy_data
* em-synchrony ORM (ActiveRecord, Sequel and maybe Datamapper) support
  as separate projects

== REQUIREMENTS

* ruby >= 1.9
* https://bitbucket.org/ged/ruby-pg (>= 0.13)
* http://rubyeventmachine.com
* (optional) EM-Synchrony[https://github.com/igrigorik/em-synchrony]

== INSTALL

=== Legacy

  $ [sudo] gem install em-pg-client

==== Gemfile

  # eventmachine
  gem "em-pg-client", "~> 0.1.1", :require => 'pg/em'
  # em-synchrony
  gem "em-pg-client", "~> 0.1.1", :require => ['pg/em', 'em-synchrony/pg']

=== Latest branch (fully-async)

  $ [sudo] gem install em-pg-client --pre

==== Gemfile

  # eventmachine
  gem "em-pg-client", "~> 0.2.0.pre", :require => 'pg/em'
  # em-synchrony
  gem "em-pg-client", "~> 0.2.0.pre", :require => ['pg/em', 'em-synchrony/pg']

==== Github

  git clone git://github.com/royaltm/ruby-em-pg-client.git
  git checkout fully-async

== WHY?

Because until now nobody did it to fit my needs.
I've found at least 3 other implementations of EM postgres client:

* https://github.com/jzimmek/em-postgresql-sequel
* https://github.com/leftbee/em-postgresql-adapter
* https://github.com/jtoy/em-postgres

and (except the bundled one which uses no longer maintained postgres-pr library)
all of them have similiar flaws:

* 2 of them are designed to support some ORM (ActiveRecord or Sequel)
  so they are EM-Synchrony only,
* non-standard API method names,
* no (nonexistent or non-working) autoreconnect implementation,
* not fully supporting asynchronous PG::Connection API.

The last one is worth some comment:

They all use blocking methods to retrieve whole result from server
(PGConn#block() or PGConn#get_result() which also
blocks when there is not enough buffered data on socket).

This implementation makes use of non-blocking: PGConn#is_busy and PGConn#consume_input methods.
Depending on size of result sets and concurrency level the gain in overall speed and responsiveness of your
application might be actually quite huge. I've done some tests[link:BENCHMARKS.rdoc] already.

== Thanks

The greetz go to:
- Authors[https://bitbucket.org/ged/ruby-pg/wiki/Home#!copying] of +pg+ driver (especially for its async-api)
- Francis Cianfrocca for great reactor framework (EventMachine[https://github.com/eventmachine/eventmachine])
- Ilya Grigorik (igrigorik[https://github.com/igrigorik]) for (untangling[http://www.igvita.com/2010/03/22/untangling-evented-code-with-ruby-fibers/]) EM with Fibers

== USAGE

=== BASIC

  require 'pg/em'
  
  # no async
  pg = PG::EM::Client.new dbname: 'test'
  pg.query('select * from foo') do |result|
    puts Array(result).inspect
  end

  # asynchronous
  EM.run do
    df = pg.query('select * from foo')
    df.callback { |result|
      puts Array(result).inspect
      EM.stop
    }
    df.errback {|ex|
      raise ex
    }
    puts "sent"
  end

  # alternatively
  EM.run do
    pg.query('select * from foo') do |result|
      raise result if result.is_a? ::Exception
      puts Array(result).inspect
      EM.stop
    end
    puts "sent"
  end

=== PG::Connection methods coverage for EventMachine
The async methods for processing with EventMachine.

==== 1. async methods (always returning +Deferrable+ object):

* +Client.async_connect+ (singleton)
* +async_reset+
* +async_exec+ (alias: +async_query+)
* +async_prepare+
* +async_exec_prepared+
* +async_describe_prepared+
* +async_describe_portal+

For calling arguments consult their original, blocking (without +async_+ prefix)
counterparts in PG::Connection manual.

Use +callback+ on the returned +Deferrable+ to receive result as it's
argument. For PG::EM::Client.async_connect and +async_reset+ the +callback+
argument is PG::EM::Client in connected state, ready for executing queries.
The rest of them provides PG::Result. You need to +clear+ obtained
PG::Result object yourself or leave it to +gc+.

To detect failure in executed method use +errback+ on returned +Deferrable+.
You should expect an instance of +Exception+ (usually PG::Error) as +errback+
argument. You may check it's +backtrace+ to find origin of the error.

==== 2. async / blocking methods (returning +Deferrable+ only when EM is running):

* +exec+ (alias: +query+)
* +prepare+
* +exec_prepared+
* +describe_prepared+
* +describe_portal+

Outside EventMachine event loop theese are regular, blocking PG::Connection methods.

All of them (1 & 2) accept block argument which is attached to callback and errback
hooks of returned +Deferrable+.

You may also mix async and blocking methods without closing the connection.
You only need to start/stop EventMachine in between async calls.

==== Special options
There are 3 additional connection options and 1 standard +pg+ option used by
async methods (the additional ones are not passed to +libpq+).
You may add them as one of the *hash* options to PG::EM::Client.new or
PG::EM::Client.async_connect or simply use accessor methods to change them
on the fly.

The options are:

- +async_autoreconnect+ (+true+/+false+ with default +true+)
  allows automatic connection reset when there was a problem with connection
  to server,
- +on_autoreconnect+ (+nil+/+Proc+ with default +nil+)
  a hook which is called after auto-reconnecting,
- +query_timeout+ (+Float+/+Fixnum+ with default +0+)
  allows to set timout for query execution,
- +connect_timeout+ (+Float+/+Fixnum+ with default +0+)
  connection establishing and reset timeout.
  
Only +connect_timeout+ is a standard +libpq+ option. Although changing it by
accessor method only affects asynchronous functions.

=== AUTORECONNECTING IN ASYNC MODE
Autoreconnecting is done in non-blocking manner using #async_reset internally.

  EM.run do
    pg = PG::EM::Client.new dbname: 'test',
          connect_timeout: 5, query_timeout: 50
    try_query = lambda do |&blk|
      pg.query('select * from foo') do |result|
        raise result if result.is_a? ::Exception
        puts Array(result).inspect
        blk.call
      end
    end
    try_query.call {
      system 'pg_ctl stop -m fast'
      system 'pg_ctl start -w'
      try_query.call { EM.stop }
    }
  end

to disable this feature call:

  pg.async_autoreconnect = false

or

  pg = PG::EM::Client.new dbname: 'test',
    async_autoreconnect: false

It's also possible to define +on_autoreconnect+ callback to be invoked
while the connection has been reset. It's called just before the send query
command is executed:

  EM.run do
    pg = PG::EM::Client.new dbname: 'test'
    pg.prepare('bar', 'select * from foo order by cdate desc') do
      pg.on_autoreconnect = proc { |c, e|
        c.prepare('bar', 'select * from foo order by cdate desc')
      }
      try_query = lambda do |&blk|
        pg.exec_prepared('bar') do |result|
          raise result if result.is_a? ::Exception
          puts Array(result).inspect
          blk.call
        end
      end
      try_query.call {
        system 'pg_ctl stop -m fast'
        system 'pg_ctl start -w'
        try_query.call { EM.stop }
      }
    end
  end

As you can see it's possible to send async query from inside +on_autoreconnect+
proc. However you have to pass +Deferrable+ from the async callback to the
caller. See +on_autoreconnect+ docs for details.

=== TRUE ASYNC
For non-blocking connect use PG::EM::Client.async_connect and +async_reset+ for 
asynchronous re-connect. Like other async methods they return deferrable object.
Use #callback to obtain already connected PG::EM::Client.

  EM.run do
    pool = (1..10).map {
      PG::EM::Client.async_connect dbname: 'test',
          connect_timeout: 5, query_timeout: 50 }

    togo = pool.length

    pool.each_with_index do |df, i|
      df.callback do |pg|
        pg.query("select * from foo") do |result|
          puts "recv: #{i}"
          EM.stop if (togo-=1).zero?
        end
        puts "sent: #{i}"
      end
      df.errback { |ex| raise ex }
    end
  end

=== EM-Synchrony
Under +em-synchrony+ PG::EM::Client.new is fully asynchronous and blocks only current fiber.
This also applies to +reset+.

The +require+ string is "em-synchrony/pg" instead of "pg/em".

  require 'em-synchrony/pg'

  EM.synchrony do
    pg = PG::EM::Client.new dbname: 'test'
    pg.query('select * from foo') do |result|
      puts Array(result).inspect
    end
    EM.stop
  end

==== PG::Connection methods coverage for EM-Synchrony
All +async_*+ methods are exactly the same as in pure EventMachine version
of PG::EM::Client.

The fiber aware methods are:

* +Client.connect+ (singleton, alias: +new+, +open+, +setdb+, +setdblogin+)
* +reset+
* +exec+ (alias: +query+)
* +prepare+
* +exec_prepared+
* +describe_prepared+
* +describe_portal+

Under the hood, they call async counterparts of self and +yield+ from current
fiber awaiting for the result. The PG::Result (or PG::EM::Client for +connect+
and +reset+) is then returned to the caller. If code block was given it's
executed with result as the argument. In that case the value of the block is
returned instead and PG::Result is cleared (or in case of +connect+ or +reset+
PG::EM::Client is being closed) after executing block. From single fiber point
of view, they behave like regular blocking PG::Client methods.

Each of them is also automatic, detecting if EventMachine is running.
If called outside EM event loop they are exactly the original methods from
PG::Connection.

Like in pure EventMachine version you can mix async, fiber aware and
blocking methods without finishing the connection. You only need to
start/stop EventMachine in between async calls.

==== Handling errors

  EM.synchrony do
    begin
      pg.query('select * from foo') do |result|
        puts result
      end
    rescue PG::Error => e
      puts "PSQL error: #{e.inspect}"
    end
    EM.stop
  end

==== Parallel async queries

  EM.synchrony do
    pg = EM::Synchrony::ConnectionPool.new(size: 2) do  
      PG::EM::Client.new :dbname => 'test'
    end
    multi = EventMachine::Synchrony::Multi.new
    multi.add :foo, pg.aquery('select * from foo') # or #async_query()
    multi.add :bar, pg.aquery('select * from bar') # #aquery() is just an alias
    res = multi.perform
    p res
    EM.stop
  end

==== Fiber Concurrency

  EM.synchrony do
    # use ConnectionPool when more Fibers will be querying at the same time!
    pg = EM::Synchrony::ConnectionPool.new(size: 5) do  
      PG::EM::Client.new :dbname => 'test'
    end
    counter = 0
    EM::Synchrony::FiberIterator.new(['select * from foo']*10, 5) do |query|
      i = counter
      pg.query(query) do |result|
        puts "recv: #{i}"
      end
      puts "sent: #{i}"
      counter += 1
    end
    EM.stop
  end

==== Async reconnect with on_autoreconnect callback

  EM.synchrony do
    on_autoreconnect = proc do |c, e|
      c.prepare('bar', 'select * from foo order by cdate desc')
    end
    pg = EM::Synchrony::ConnectionPool.new(size: 5) do
      p = PG::EM::Client.new dbname: 'test', on_autoreconnect: on_autoreconnect
      on_autoreconnect.call p
      p
    end
    try_query = lambda do
      pg.exec_prepared('bar') do |result|
        raise result if result.is_a? ::Exception
        puts Array(result).inspect
      end
    end
    try_query.call
    system 'pg_ctl stop -m fast'
    system 'pg_ctl start -w'
    try_query.call
    EM.stop
  end

== LICENCE

The MIT License - Copyright (c) 2012 RafaÅ‚ Michalski
